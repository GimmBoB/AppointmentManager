@page "/appointment"

@using AppointmentManager.Shared
@using AppointmentManager.Web.Extensions
@using AppointmentManager.Web.Models

<PageTitle>Appointment</PageTitle>

<CardDisplay>
    <MudCard Style="position: relative" Outlined="true">
            <MudForm Model="@_item" @ref="@_form" Validation="@(new Func<object, string, Task<IEnumerable<string>>>(ValidateAsync))" ValidationDelay="0">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Localizer["Appointment"]</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField
                        @bind-Value="_item.Name"
                        For="@(() => _item.Name)"
                        Label="Name"
                        HelperText="@Localizer["EnterName"]"
                        Class="mt-3"
                        Required="true"/>
                    <MudTextField
                        @bind-Value="_item.Email"
                        For="@(() => _item.Email)"
                        Label="E-Mail"
                        HelperText="@Localizer["EnterEmail"]"
                        Class="mt-3"
                        Required="true"/>
                    <MudStack Row="true">
                        <MudSelect
                            T="string"
                            Style="max-width: 125px !important;"
                            bind-Value="_countryCode"
                            ValueChanged="@(s => _countryCode = s)"
                            Label="@Localizer["CountryCode"]"
                            HelperText="@Localizer["EnterCountryCode"]"
                            AnchorOrigin="Origin.BottomCenter">
                            @foreach (var code in _countryCodes)
                            {
                                <MudSelectItem Value="code"/>
                            }
                        </MudSelect>
                        <MudTextField
                            T="string"
                            bind-Value="_number"
                            ValueChanged="@(s => _number = s)"
                            Label="@Localizer["Number"]"
                            HelperText="@Localizer["EnterPhone"]"
                            Mask="@(new PatternMask("000000000000000"))"/>
                    </MudStack>
                    <MudTextField
                        @bind-Value="_item.ExtraWishes"
                        For="@(() => _item.ExtraWishes)"
                        Label="@Localizer["ExtraWishes"]"
                        HelperText="@Localizer["EnterExtraWishes"]"
                        Class="mt-3"
                        Required="false"/>
                    <MudDatePicker
                        IsDateDisabledFunc="@(time => time.Date < DateTime.Now.Date || (!_allTimeSlotsPerDate.TryGetValue(time.Date, out var slots) || !slots.Any()))"
                        Date="@_selectedDate"
                        Rounded="true"
                        Adornment="Adornment.Start"
                        AnchorOrigin="Origin.CenterCenter"
                        TransformOrigin="Origin.CenterCenter"
                        IconSize="Size.Small"
                        Required="true"
                        Label="@Localizer["Date"]"
                        HelperText="@Localizer["PickDate"]"
                        DateChanged="ChangeDateAsync"/>
                    <MudSelect
                        T="Timeslot"
                        @bind-Value="_selectedTimeSlot"
                        Label="@Localizer["Timeslot"]"
                        HelperText="@Localizer["PickTimeslot"]"
                        Class="mt-3"
                        Required="true"
                        ToStringFunc="@(timeslot => timeslot is null ? "No time slot available pick another date" : $"{timeslot.From:hh\\:mm} - {timeslot?.To:hh\\:mm}")"
                        RequiredError="@Localizer["TimeslotRequired"]"
                        Disabled="_timeSlotDisabled">
                        @foreach (var timeslot in _timeSlotsOfDay)
                        {
                            <MudSelectItem Value="timeslot"/>
                        }
                    </MudSelect>
                    <MudSelect
                        T="AppointmentCategory"
                        @bind-Value="_selectedCategory"
                        Label="@Localizer["Category"]"
                        HelperText="@Localizer["PickCategory"]"
                        Class="mt-3"
                        Required="true"
                        ToStringFunc="@(category => category is null ? "" : $"{category.Name}")"
                        RequiredError="@Localizer["CategoryRequired"]">
                        @foreach (var category in _categories)
                        {
                            <MudSelectItem Value="category"/>
                        }
                    </MudSelect>
                    @for (var i = 0; i <= _inputFileCount; i++)
                    {
                        @if (_inputFileCount <= 3 && i < 3)
                        {
                            var i1 = i;
                            var hasFile = _files.TryGetElement(i1, out _);
                            <MudFileUpload T="IBrowserFile" Accept=".jpg, .jpeg, .png, .gif, .tif, .tiff" OnFilesChanged="UploadFileAsync">
                                <ButtonTemplate>
                                    <MudIconButton
                                        HtmlTag="label"
                                        Icon="@Icons.Material.Outlined.AddPhotoAlternate"
                                        Size="Size.Small"
                                        for="@context"
                                        Disabled="@hasFile">
                                    </MudIconButton>
                                    @{
                                        if (_files.TryGetElement(i1, out var file))
                                        {
                                            <MudLink Underline="Underline.Always" Color="Color.Primary" Typo="Typo.subtitle2">@(file.Name)</MudLink>
                                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteImage(i1))"/>                                    }
                                    }
                                </ButtonTemplate>
                            </MudFileUpload>
                        }
                    }
                    </MudCardContent>
            </MudForm>
        <MudCardActions>
            <MudButton OnClick="() => Navigation.TryNavigateToReturnUrl()" Disabled="@_showOverlay">@Localizer["Cancel"]</MudButton>
            <MudButton OnClick="@(async () => await SubmitAsync())" Variant="Variant.Text" Color="Color.Primary" Class="ml-auto" Disabled="@_showOverlay">@Localizer["Send"]</MudButton>
        </MudCardActions>
            <MudOverlay Visible="@_showOverlay" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
            </MudOverlay>
        </MudCard>
</CardDisplay>
