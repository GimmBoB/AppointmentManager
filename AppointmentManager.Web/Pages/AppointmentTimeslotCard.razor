@page "/appointmenttimeslot"
@page "/appointmenttimeslot/{Id:guid?}"

@attribute [Authorize(Roles = "admin")]

<PageTitle>Timeslot</PageTitle>

<CardDisplay>
    <MudCard Style="position: relative" Outlined="true">
        <MudForm Model="@_item" @ref="@_form" Validation="@(new Func<object, string, Task<IEnumerable<string>>>(ValidateAsync))" ValidationDelay="0">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Timeslot</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudSelect
                    T="string"
                    Value="@_selectedDay"
                    ValueChanged="@(s => { _selectedDay = s; _item.Day = Enum.TryParse<DayOfWeek>(s, out var day) ? day : _item.Day; })"
                    Validation="@((string? s) => Enum.TryParse<DayOfWeek>(s, out _) ? Enumerable.Empty<string>() : new List<string> { $"'{s}' is not valid" })"
                    Label="Day"
                    HelperText="Pick day here"
                    Class="mt-3"
                    Required="true"
                    ToStringFunc="@(timeslot => timeslot.ToString())"
                    RequiredError="Day is required">
                    @foreach (var day in Enum.GetNames<DayOfWeek>())
                    {
                        <MudSelectItem Value="day"/>
                    }
                </MudSelect>
                <MudTimePicker
                    @ref="_fromPicker"
                    Time="_item.From"
                    TimeChanged="@(span => ChangeFromAsync(span, _item))"
                    For="() => _item.From"
                    Adornment="Adornment.Start"
                    AnchorOrigin="Origin.CenterCenter"
                    TransformOrigin="Origin.CenterCenter"
                    IconSize="Size.Small"
                    Label="From"
                    HelperText="Pick start time here"
                    Class="mt-3"
                    Required="true"
                    RequiredError="From is required"/>
                <MudTimePicker
                    @ref="_toPicker"
                    Time="_item.To"
                    TimeChanged="@(span => ChangeToAsync(span, _item))"
                    For="() => _item.To"
                    Adornment="Adornment.Start"
                    AnchorOrigin="Origin.CenterCenter"
                    TransformOrigin="Origin.CenterCenter"
                    IconSize="Size.Small"
                    Label="To"
                    HelperText="Pick end time here"
                    Class="mt-3"
                    Required="true"
                    RequiredError="ToIsRequired"/>
            </MudCardContent>
        </MudForm>
        <MudCardActions>
            <MudButton OnClick="() => Navigation.TryNavigateToReturnUrl()" Disabled="@_showOverlay">Cancel</MudButton>
            <MudButton OnClick="@(async () => await SubmitAsync())" Variant="Variant.Text" Color="Color.Primary" Class="ml-auto" Disabled="@_showOverlay">Save</MudButton>
        </MudCardActions>
        <MudOverlay Visible="@_showOverlay" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
        </MudOverlay>
    </MudCard>
</CardDisplay>